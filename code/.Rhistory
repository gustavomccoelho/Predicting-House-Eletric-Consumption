2+2
q()
install.packages("ggplot")
install.packages("dplyr")
install.packages("ISLR")
install.packages("ISLR")
install.packages("slam")
install.packages("slam")
install.packages("slam")
install.packages("tm")
install.packages("SnowballC")
# Setting up work directory
setwd("~/Projects/Predicting-House-Eletric-Consumption/code")
library(ranger)
library(ggplot2)
library(e1071)
library(caret)
library(xgboost)
library(spm)
# Loading train and test data
train <- read.csv("../dataset/train_data.csv")
test <- read.csv("../dataset/test_data.csv")
ggplot(train, aes(x = Appliances)) + geom_histogram(binwidth = 10) + ggtitle("Distribution of Appliances")
ggplot(train, aes(x = Appliances)) + geom_boxplot() + ggtitle("Distribution of Appliances")
threshold <- quantile(train$Appliances, 0.97)
train_2 <- train[train$Appliances < threshold, ]
test_2 <- test[test$Appliances < threshold, ]
length(table(train_2$Appliances))
length(table(test_2$Appliances))
train_3 <- train_2[,!(names(train_2)) %in% c("WeekStatus", "Day_of_week")]
test_3 <- test_2[,!(names(test_2)) %in% c("WeekStatus", "Day_of_week")]
train_3$date <- as.POSIXct(train_3$date, format = "%Y-%m-%d %H:%M:%S")
test_3$date <- as.POSIXct(test_3$date, format = "%Y-%m-%d %H:%M:%S")
train_3$Day_of_week <- weekdays(train_3$date)
test_3$Day_of_week <- weekdays(test_3$date)
set_weekday_language <- function(X){
weekday = ifelse(X == "segunda", "monday",
ifelse(X == "terça", "tuesday",
ifelse(X == "quarta", "wednesday",
ifelse(X == "quinta", "thursday",
ifelse(X == "sexta", "friday",
ifelse(X == "sábado", "saturday", "sunday"))))))
return(weekday)
}
train_3$Day_of_week <- as.factor(apply(train_3["Day_of_week"], 2, set_weekday_language))
test_3$Day_of_week <- as.factor(apply(test_3["Day_of_week"], 2, set_weekday_language))
set_weekstatus <- function(X){
weekstatus = ifelse(X == "saturday" | X == "sunday", "weekend", "weekday")
return(weekstatus)
}
train_3$hour <- as.factor(hour(train_3["date"]))
train_3$hour <- format(strptime(train_3$date,"%H:%M:%S"),'%H')
View(train_3)
train_3$hour <- format(strptime(train_3$date,"%Y-%m-%d %H:%M:%S"),'%H')
View(train_3)
str(train_3)
train_3$hour <- as.factor(format(strptime(train_3$date,"%Y-%m-%d %H:%M:%S"),'%H'))
str(train_3)
train_3$date <- NULL
test_3$date <- NULL
test_3$hour <- as.factor(format(strptime(test_3$date,"%Y-%m-%d %H:%M:%S"),'%H'))
train_3 <- train_2[,!(names(train_2)) %in% c("WeekStatus", "Day_of_week")]
test_3 <- test_2[,!(names(test_2)) %in% c("WeekStatus", "Day_of_week")]
train_3$date <- as.POSIXct(train_3$date, format = "%Y-%m-%d %H:%M:%S")
test_3$date <- as.POSIXct(test_3$date, format = "%Y-%m-%d %H:%M:%S")
train_3$Day_of_week <- weekdays(train_3$date)
test_3$Day_of_week <- weekdays(test_3$date)
set_weekday_language <- function(X){
weekday = ifelse(X == "segunda", "monday",
ifelse(X == "terça", "tuesday",
ifelse(X == "quarta", "wednesday",
ifelse(X == "quinta", "thursday",
ifelse(X == "sexta", "friday",
ifelse(X == "sábado", "saturday", "sunday"))))))
return(weekday)
}
train_3$Day_of_week <- as.factor(apply(train_3["Day_of_week"], 2, set_weekday_language))
test_3$Day_of_week <- as.factor(apply(test_3["Day_of_week"], 2, set_weekday_language))
set_weekstatus <- function(X){
weekstatus = ifelse(X == "saturday" | X == "sunday", "weekend", "weekday")
return(weekstatus)
}
train_3$WeekStatus <- as.factor(apply(train_3["Day_of_week"], 2, set_weekstatus))
test_3$WeekStatus <- as.factor(apply(test_3["Day_of_week"], 2, set_weekstatus))
# Creating another variable related to the hour of each row
train_3$hour <- as.factor(format(strptime(train_3$date,"%Y-%m-%d %H:%M:%S"),'%H'))
test_3$hour <- as.factor(format(strptime(test_3$date,"%Y-%m-%d %H:%M:%S"),'%H'))
train_3$date <- NULL
test_3$date <- NULL
train_cor = train_3
train_cor$WeekStatus <- as.integer(train_3$WeekStatus)
train_cor$Day_of_week <- as.integer(train_3$Day_of_week)
train_cor$hour <- as.integer(train_3$hour)
heatmap(cor(train_cor))
factors = c("WeekStatus", "Day_of_week", "hour")
normParam <- preProcess(train_3[,!(names(train_3)) %in% factors])
train_4 = predict(normParam, train_3[,!(names(train_3)) %in% factors])
test_4 = predict(normParam, test_3[,!(names(test_3)) %in% factors])
for(col in factors){
train_4[col] = train_3[col]
test_4[col] = test_3[col]
}
model <- ranger(Appliances ~ ., data = train_4, importance = "impurity")
importance <- as.data.frame(model$variable.importance)
names(importance) <- c("values")
ggplot(importance, aes(x = rownames(importance), y = values)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
coord_flip() +
xlab("") +
theme_bw()
train_5 <- train_4[,!(names(train_4)) %in% c("rv1", "rv2", "Day_of_week", "WeekStatus")]
test_5 <- test_4[,!(names(test_4)) %in% c("rv1", "rv2", "Day_of_week", "WeekStatus")]
model_1 <- ranger(Appliances ~ ., data = train_5)
predictions_1 = predict(model_1, test_5)
predictions_1 <- predictions_1$predictions
predictions_1 <- predictions_1*normParam$std["Appliances"] + normParam$mean["Appliances"]
actual = test_5$Appliances*normParam$std["Appliances"] + normParam$mean["Appliances"]
rss_1 <- sum((predictions_1 - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq_1 <- 1 - rss_1/tss
MSPE_1 <- mean((predictions_1 - actual)^2)
rsq_1
MSPE_1
RMSE(pred = prediction_1, obs = actual)
RMSE(pred = predictions_1, obs = actual)
actual = test_5$Appliances*normParam$std["Appliances"] + normParam$mean["Appliances"]
rss_1 <- sum((predictions_1 - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq_1 <- 1 - rss_1/tss
RMSE_1 <- RMSE(pred = predictions_1, obs = actual)
rsq_1
RMSE_1
model_2 <- svm(Appliances ~ ., data = train_5)
predictions_2 = predict(model_2, test_5)
predictions_2 <- predictions_2*normParam$std["Appliances"] + normParam$mean["Appliances"]
rss_2 <- sum((predictions_2 - actual) ^ 2)  ## residual sum of squares
rsq_2 <- 1 - rss_2/tss
RMSE_2 <- RMSE(pred = predictions_2, obs = actual)
rsq_2
RMSE_2
model_2 <- svm(Appliances ~ ., data = train_5, kernel = "linear")
predictions_2 = predict(model_2, test_5)
predictions_2 <- predictions_2*normParam$std["Appliances"] + normParam$mean["Appliances"]
# Evaluating model: R2 - 0.27, RMSE - 54.36
rss_2 <- sum((predictions_2 - actual) ^ 2)  ## residual sum of squares
rsq_2 <- 1 - rss_2/tss
RMSE_2 <- RMSE(pred = predictions_2, obs = actual)
rsq_2
RMSE_2
model_2 <- svm(Appliances ~ ., data = train_5, kernel = "polynomial")
predictions_2 = predict(model_2, test_5)
predictions_2 <- predictions_2*normParam$std["Appliances"] + normParam$mean["Appliances"]
# Evaluating model: R2 - 0.27, RMSE - 54.36
rss_2 <- sum((predictions_2 - actual) ^ 2)  ## residual sum of squares
rsq_2 <- 1 - rss_2/tss
RMSE_2 <- RMSE(pred = predictions_2, obs = actual)
rsq_2
RMSE_2
model_2 <- svm(Appliances ~ ., data = train_5, kernel = "sigmoid")
predictions_2 = predict(model_2, test_5)
predictions_2 <- predictions_2*normParam$std["Appliances"] + normParam$mean["Appliances"]
# Evaluating model: R2 - 0.27, RMSE - 54.36
rss_2 <- sum((predictions_2 - actual) ^ 2)  ## residual sum of squares
rsq_2 <- 1 - rss_2/tss
RMSE_2 <- RMSE(pred = predictions_2, obs = actual)
rsq_2
RMSE_2
predictions_2
predictions_2 = predict(model_2, test_5)
predictions_2
predictions_2 <- predictions_2*normParam$std["Appliances"] + normParam$mean["Appliances"]
predictions_2
predictions_1
model_3 <- lm(Appliances ~ ., data = train_5)
predictions_3 <- predict(model_3, test_5)
predictions_3 <- predictions_3*normParam$std["Appliances"] + normParam$mean["Appliances"]
rss_3 <- sum((predictions_3 - actual) ^ 2)  ## residual sum of squares
rsq_3 <- 1 - rss_3/tss
RMSE_3 <- RMSE(pred = predictions_3, obs = actual)
rsq_3
RMSE_3
train_5_DMatrix = xgb.DMatrix(as.matrix(train_5[,!names(train_5) %in% "Appliances"]), label = train_5$Appliances)
test_5_DMatrix = xgb.DMatrix(as.matrix(test_5[,!names(test_5) %in% "Appliances"]), label = test_5$Appliances)
# Trying secound model (XGBoost)
str(train_5)
train.control <- trainControl(method = "cv", number = 10)
model = train(Appliances ~ ., train_5, method = "ranger", trControl = train.control)
predictions = predict(model, test_5)
predictions <- predictions*normParam$std["Appliances"] + normParam$mean["Appliances"]
rss <- sum((predictions - actual) ^ 2)  ## residual sum of squares
rsq <- 1 - rss/tss
RMSE <- RMSE(pred = predictions, obs = actual)
rsq
RMSE
